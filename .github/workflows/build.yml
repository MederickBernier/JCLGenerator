name: Release JCL Generator

on:
  push:
    tags:
      - 'v*'  # Runs only when you push a version tag like "v0.1", "v1.0", etc.
  workflow_dispatch:  # Allows manual trigger

jobs:
  build:
    name: Build and Package JCL Generator
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            ext: ""
          - os: windows-latest
            goos: windows
            goarch: amd64
            ext: ".exe"
          - os: macos-latest
            goos: darwin
            goarch: amd64
            ext: ""

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4  # Fetches the code

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'  # Ensure this matches your Go version

      - name: Verify Go Modules
        run: go mod tidy

      - name: Build JCL Generator (${{ matrix.goos }})
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o jclgen${{ matrix.ext }} ./cmd/main.go

      - name: Create Release Directory
        run: mkdir -p release

      - name: Package as ZIP
        run: |
          zip -r release/jclgen-${{ matrix.goos }}.zip jclgen${{ matrix.ext }}
        shell: bash

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: jclgen-${{ matrix.goos }}
          path: release/jclgen-${{ matrix.goos }}.zip
          retention-days: 7

  release:
    name: Publish Release
    needs: build  # Waits for the build job to finish
    runs-on: ubuntu-latest
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/**/*.zip
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref }}
          name: "JCL Generator ${{ github.ref_name }}"
          draft: false
          prerelease: false
